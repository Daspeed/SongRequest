<polymer-element class="combineDiv" name="x-sr-playlist">
  <template>

    <div id="songsOuterDiv">
        <div id="songsHeaderDiv" class="gradient">
            <h2>Songs</h2>
        </div>
        <div id="songsSearchDiv">
            <form on-submit="{{formSubmit}}">
                <input type="text" class="searchtext" name="searchtext" id="searchtext" value="{{filter}}">
                <input type="submit" class="button searchbutton" name="searchbutton" id="searchbutton" value="Search" on-click="{{search}}">
                <input type="button" class="button clearbutton" name="clearbutton" id="clearbutton" value="Reset" on-click="{{reset}}">
            </form>
            <form on-submit="{{formSubmit}}">
                Page:&nbsp;
                <input type="text" name="pagetext" class="pagetext" id="currentPage" value="{{pageNumber}}">
                of&nbsp;<span class="pageCount">{{totalPages}}</span>
            </form>
            <input type="button" class="button previousbutton" name="previousbutton" id="previousbutton" value="Previous" on-click="{{previousPage}}">
            <input type="button" class="button nextbutton" name="nextbutton" id="nextbutton" value="Next" on-click="{{nextPage}}">
        </div>
        <div id="songsDiv">

            <table class="songsTable">
                <tr class="gradient headerrow">
                    <th class="actionColumn">Action</th>
                    <th on-click="{{headerClick}}" id="nameHeader" class="songNameColumn {{sortBy !== 'name' ? '' : ('sorted' + (ascending?' Asc':' Desc')) }}">Name</th>
                    <th on-click="{{headerClick}}" id="artistHeader" class="songArtistColumn {{sortBy !== 'artist' ? '' : ('sorted' + (ascending?' Asc':' Desc')) }}">Artist</th>
                    <th class="songDurationColumn">Length</th>
                    <th on-click="{{headerClick}}" id="genreHeader" class="songGenreColumn {{sortBy !== 'genre' ? '' : ('sorted' + (ascending?' Asc':' Desc')) }}">Genre</th>
                    <th on-click="{{headerClick}}" id="yearHeader" class="songYearColumn {{sortBy !== 'year' ? '' : ('sorted' + (ascending?' Asc':' Desc')) }}">Year</th>
                    <th on-click="{{headerClick}}" id="dateHeader" class="songDateCreatedColumn {{sortBy !== 'date' ? '' : ('sorted' + (ascending?' Asc':' Desc')) }}">Date added</th>
                    <th on-click="{{headerClick}}" id="playdateHeader" class="songDatePlayedColumn {{sortBy !== 'playdate' ? '' : ('sorted' + (ascending?' Asc':' Desc')) }}">Last played</th>
                    <th class="songRequesterColumn">Requester</th>
                    <th class="songSkippedByColumn">Skipped by</th>
                </tr>
                <template repeat="{{ song, index in songs }}">
                <tr class="songRow {{index % 2 == 1 ? 'evenrow' : 'oddrow'}}">
                    <td class="actionColumn">
                        <input type="button" class="button addButton" value="+" title="Add song to queue" data-songid="{{song.TempId}}" on-click="{{addSong}}" />
                    </td>
                    <td class="songNameColumn"><a class="songlink" _href="file://{{song.FileName}}" _title="{{song.FileName}}">{{song.Name}}</a></td>
                    <td class="songArtistColumn">{{song.Artist}}</td>
                    <td class="songDurationColumn">{{song.TextDuration}}</td>
                    <td class="songGenreColumn">{{song.Genre}}</td>
                    <td class="songYearColumn">{{song.Year}}</td>
                    <td class="songDateCreatedColumn">{{song.DateCreated}}</td>
                    <td class="songDatePlayedColumn">{{song.LastPlayTime}}</td>
                    <td class="songRequesterColumn">{{song.LastRequester}}</td>
                    <td class="songSkippedByColumn">{{song.SkippedBy}}</td>
                </tr>
                </template>
            </table>

        </div>
    </div>

  </template>
  <script type="text/javascript" src="json2.js"></script>
  <script>
      Polymer('x-sr-playlist', {
          filter: '',
          pageNumber: 1,
          totalPages: 1,
          sortBy: 'artist',
          ascending: true,

          ready: function () {
              this.songs = [];

              this.search();
          },
          formSubmit: function (evt) {
              evt.preventDefault();
          },
          convertNumberToTime: function (num) {
              var minutes = parseInt(num / 60, 10);
              var seconds = parseInt(num % 60, 10);

              return String(minutes) + ((seconds < 10) ? ':0' : ':') + String(seconds);
          },
          reset: function () {
              this.filter = '';
              this.pageNumber = 1;
              this.search();
          },
          previousPage: function () {
              this.pageNumber = Math.max(this.pageNumber - 1, 1);
              this.search();
          },
          nextPage: function () {
              this.pageNumber = Math.min(this.pageNumber + 1, this.totalPages);
              this.search();
          },
          addSong: function (e) {
              var id = e.target.attributes['data-songid'].value;

              this.fire('songadded', id);
          },
          headerClick: function (e) {
              this.sortBy = e.target.id.replace(/Header$/, '');
              this.ascending = !this.ascending;

              this.search();
          },
          search: function () {
              var me = this;

              var message = {
                  'Filter': me.filter,
                  'Page': me.pageNumber || 1,
                  'SortBy': me.sortBy,
                  'Ascending': me.ascending
              };

              reqwest({
                  url: '/dynamic/playlist',
                  method: 'post',
                  contentType: 'application/json',
                  type: 'json',
                  data: JSON.stringify(message),
                  success: function (resp) {
                      me.ascending = resp.Ascending,
                      me.pageNumber = resp.CurrentPage;
                      me.sortBy = resp.SortBy;
                      me.totalPages = resp.TotalPageCount;

                      for (var i = 0; i < resp.SongsForCurrentPage.length; i += 1) {
                          resp.SongsForCurrentPage[i].TextDuration = me.convertNumberToTime(resp.SongsForCurrentPage[i].Duration);
                      }

                      me.songs = resp.SongsForCurrentPage;
                  }
              });
          }
      });
  </script>
</polymer-element>
